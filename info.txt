Node: Entorno que permite ejetucar codigo js en la maquina
Paso 1 => Instalar node (contiene nmp)
Paso 2 => Instalar y configurar webpack y babel
PASO2 2 REAL => Instalar CRA (configura automaticamente webpack y babel)
Paso 3 => Crear el proyecto
    -npm install -g create-react-app $$ create-react-app <nombre>
    -npx create-react-app <nombre>
// Esto solo se hace una vez

Paso 4 => Entrar en la carpeta del proyecto
Paso 5 => Ejecutar npm start


COMPONENTE
Crear una funcion
Con Letra Mayuscula
Debo exportar la funcion
Debe devolver una sola cosa

Que suele contener un COMPONENTE   
    -props
    -state => variable que al ser modificada me actualiza el componente
    -ciclo de vida
    -metodos de ciclo de vida

Componente Clase
ANTES CON CLASS
class MiComponenteClass extends Reac.component{
constructor(props){
    super(props);
    this.state = {
        name:"Luciano",
        edad: 27,
    }
}
}

 class MiComponenteClass extends Reac.component{
   render(){
     <h1>Hola mundo</h1>
   }
   }

Hooks:
    -useState: premite cambiar el estado de un componente 
    y por ende provoca un re-render
    useEffect: permite ejecutar una funcion cual el component
    se renderiza

Ciclo de vida con class:
    -mount: cual el componente se monta 
    -update: cuando el componente se actualiza
    -unmout: cuando el componente se desmmonta

    -mount:
        -constructor: se ejecuta al crear el componente
            -render: se ejecuta al renderizar el componente
            -componentDidMount: se ejecuta al montar el componente
    
    -update: 
        -render: se ejecuta al renderizar el componente
        -shouldComponentUpdate: se ejecuta antes de actualizar el componente
    
    unmount:
        -componentWillUnmount: se ejecuta antes de desmontar el componente

a => obligatorio, una funcion
b => un array
useEffect(() => {})

promesas:
    pending: pendiente
    result: resultado de la promesas
    rejected: 